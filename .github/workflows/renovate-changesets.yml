name: Add changeset to Renovate updates

on:
  push:
    branches:
      - master
  pull_request_target:
    types: [opened, synchronize, labeled]
    paths:
      - .github/workflows/renovate-changesets.yml
      - '**/yarn.lock'
      - '**/pnpm-lock.yaml'

jobs:
  generate-changeset:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]

    # if: github.actor == 'renovate[bot]'
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.head_ref }}
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email 'Renovate Changesets'
          git config --global user.name 'github+renovate@scharley.me'

      - name: Generate changeset
        uses: actions/github-script@v7
        with:
          script: |
            const { promises: fs } = require("fs");

            async function getPackagesDeps(file) {
              const data = JSON.parse(await fs.readFile(file, 'utf8'))
              return Object.keys(data.dependencies || {})
            }

            // Parses package.json files and returns the package names
            async function getPackagesNames(files) {
              const names = [];
              for (const file of files) {
                const data = JSON.parse(await fs.readFile(file, "utf8"));
                if (!data.private) {
                  names.push(data.name);
                }
              }
              return names;
            }

            async function createChangeset(fileName, packageBumps, packages) {
              let message = "";
              for (const [pkg, bump] of packageBumps) {
                message = message + `Updated dependency \`${pkg}\` to \`${bump}\`.\n`;
              }

              const pkgs = packages.map((pkg) => `'${pkg}': patch`).join("\n");
              const body = `---\n${pkgs}\n---\n\n${message.trim()}\n`;
              await fs.writeFile(fileName, body);
            }

            async function getBumps(files) {
              const bumps = new Map();
              for (const file of files) {
                const { stdout: changes } = await exec.getExecOutput("git", [
                  "show",
                  file,
                ]);
                for (const change of changes.split("\n")) {
                  if (!change.startsWith("+ ")) {
                    continue;
                  }
                  const match = change.match(/"(.*?)"/g);
                  const name = match[0].replace(/"/g, "");
                  const version = match[1].replace(/"/g, "");
                  const deps = await getPackagesDeps(file);
                  if (!deps.includes(name)) {
                    continue;
                  }

                  bumps.set(name, version);
                }
              }
              return bumps;
            }

            const branch = await exec.getExecOutput("git branch --show-current");
            if (!branch.stdout.startsWith("renovate/")) {
              console.log("Not a renovate branch, skipping");
              return;
            }
            const diffOutput = await exec.getExecOutput("git diff --name-only HEAD~1");
            const diffFiles = diffOutput.stdout.split("\n");
            if (diffFiles.find((f) => f.startsWith(".changeset"))) {
              console.log("Changeset already exists, skipping");
              return;
            }
            const files = diffFiles
              .filter((file) => file !== "package.json") // skip root package.json
              .filter((file) => file.includes("package.json"));
            const packageNames = await getPackagesNames(files);
            if (!packageNames.length) {
              console.log("No package.json changes to published packages, skipping");
              return;
            }
            const { stdout: shortHash } = await exec.getExecOutput(
              "git rev-parse --short HEAD"
            );
            const fileName = `.changeset/renovate-${shortHash.trim()}.md`;

            const packageBumps = await getBumps(files);
            if (!packageBumps.size) {
              console.log('No dependencies changes to published packages, skipping');
              return;
            }
            await createChangeset(fileName, packageBumps, packageNames);
            await exec.exec("git", ["add", fileName]);
            await exec.exec("git commit -C HEAD --amend --no-edit");
            await exec.exec("git push --force");
